---
description: 
globs: *.mmd
alwaysApply: false
---
Mermaid 流程图 (graph) 编辑规范 (V2 - 强化版)
图表类型与方向:
以 graph 关键字开头，后跟方向标识符：
TD 或 TB: 从上到下 (Top to Bottom)
BT: 从下到上 (Bottom to Top)
LR: 从左到右 (Left to Right)
RL: 从右到左 (Right to Left)
示例: graph TD
# 节点 (Nodes):
定义: nodeId[标签], nodeId(标签), nodeId{标签}, nodeId((标签)), nodeId[(标签)] 等。
nodeId (节点 ID):
必须是图内 唯一 的标识符。
通常由字母和数字组成，避免使用空格或特殊字符。
节点 ID 在首次被连接或定义形状/标签时即被创建。
# 标签 (Label):
显示在节点上的文本。
核心规则: 如果标签包含 空格、括号 ()、花括号 {}、方括号 [] 或任何其他特殊字符，必须 使用 双引号 "" 将其完全包裹起来。这是避免解析错误的关键。
正确: A["启动 main()"], I{"认证 (async)"}, R{"调用插件/功能 (Executor?)"}
错误: A[启动 main()], I{认证 (async)}
简单标签（仅字母数字）可以不用引号：B(创建事件循环)
形状: 由标签外的括号决定，如 [] (矩形), () (圆角矩形), {} (菱形), (()) (圆形), [()] (圆柱/数据库)。
# 边 (Edges / Connections):
定义: 使用 --> 表示有向连接。
语法: 源节点ID --> 目标节点ID
核心规则: 源节点ID 和 目标节点ID 必须 是有效的、已存在的节点 ID。绝对不能连接到子图的名称。
带标签的边: 源节点ID -- 边标签 --> 目标节点ID
示例: N -- 文本消息 --> O
边标签同样建议用引号包裹，如果包含特殊字符。
# 子图 (Subgraphs):
定义: subgraph 子图ID ["显示的标题"] 开始，以 end 结束。
子图ID: 内部标识符，遵循节点 ID 规则。
"显示的标题": 显示在子图边框上的标题。强烈建议在这里包含对应的文件名或模块路径，并使用双引号包裹。
示例: subgraph ConnectionHandler ["Connection Handler (core/connection.py)"]
方向: 可在子图内部使用 direction LR (或其他) 指定局部布局。
连接规则:
从外部连接到子图: 边必须指向子图 内部 的某个 具体节点 ID。
正确: E --> H (如果 H 是 ConnectionHandler 子图内的节点)
错误: E --> ConnectionHandler
从子图连接到外部: 边从子图 内部 的某个 具体节点 ID 指向外部节点 ID。
子图间连接: 边从一个子图的 内部节点 ID 指向另一个子图的 内部节点 ID。
# 注释 (Comments):
语法: 使用 %% 开始注释。
核心规则: 强烈建议将注释放在单独的行。避免在语句（节点定义、边定义、子图声明等）的末尾添加行内注释 %% ...，因为这极易导致各种难以预测的解析错误，尤其是在复杂结构或某些解析器中。
推荐:
```text
    %% 这是节点 A 的注释
    A["节点 A"]
    %% 这是 A 到 B 的连接注释
    A --> B
```
不推荐且极易出错:
```text
    A["节点 A"] %% 这是节点 A 的注释 (可能导致错误)
    A --> B %% 这是 A 到 B 的连接注释 (可能导致错误)
```
# 分号 (Semicolons):
在 Mermaid 图定义中，每行语句末尾的分号 ; 通常是 可选 的，特别是当语句独占一行时。
为了减少潜在的解析问题（如我们之前遇到的），建议省略行尾的分号。
# 样式 (Styling):
定义类: classDef className fill:#f9f,stroke:#333
应用类: class nodeId1,nodeId2 className (可以对节点或子图 ID 应用)
# 总结 - 避免踩坑的关键点:
标签引号: 特殊字符/空格标签 必须 用双引号 ""。
子图连接: 永远 连接到节点 ID，绝不 连接到子图名称。
行尾注释: 禁止 在语句后使用 %% 行内注释，注释请独占一行。
分号: 省略 行尾分号。
ID唯一: 确保所有节点 ID 和子图 ID 唯一。
子图标题: 用引号包裹，并包含文件/模块信息。






