---
description: 
globs: 
alwaysApply: true
---
# Incremental Refactoring Plan (Steps 6 - 10')

This rule outlines the specific, incremental approach for refactoring the connection handling logic, based on the revised steps in [plan.md](mdc:main/xiaozhi-server/core/plan.md). The primary goal is to ensure testability and stability at each stage before proceeding.

## Guiding Principles:


2.  **Step 7' - Integrate Router (Routing Only):**
    *   Instantiate `MessageRouter` within `[ConnectionHandler](mdc:main/xiaozhi-server/core/connection_handler.py)`.
    *   In `_route_message`, call the router to get the handler *instance*, but **DO NOT** call the handler's `handle` method yet.
    *   **Keep the original calls** to `handleTextMessage` and `handleAudioMessage`.
    *   Add logging to verify the router selects the correct handler type.
    *   **Test:** Verify router logging and that *all existing functionality remains unchanged*.

3.  **Step 8' - Integrate Handlers Incrementally:**
    *   **8a' (Text):**
        *   Modify `_route_message` in `[ConnectionHandler](mdc:main/xiaozhi-server/core/connection_handler.py)`.
        *   If the router returns `TextMessageHandler`, create `HandlerContext` (add a `_create_handler_context` helper method to `ConnectionHandler`) and call `handler.handle(message, context)`.
        *   **Remove** the call to `handleTextMessage`.
        *   **Keep** the call to `handleAudioMessage` for audio messages.
        *   Perform minimal necessary adaptations within `TextMessageHandler` or its helpers to work with `context`.
        *   **Test:** Focus on *all text-related functionality*. Ensure it works correctly via the new handler. Verify *audio functionality remains unchanged* (via the old path).
    *   **8b' (Audio):**
        *   Modify `_route_message` again.
        *   If the router returns `AudioMessageHandler`, create `HandlerContext` and call `handler.handle(message, context)`.
        *   **Remove** the call to `handleAudioMessage`.
        *   Perform minimal necessary adaptations within `AudioMessageHandler` or its helpers.
        *   **Test:** Focus on *all audio-related functionality*. Ensure it works correctly via the new handler. Verify *text functionality still works* (via its new handler).

4.  **Step 9' - Introduce ConnectionManager:**
    *   Prepare `[ConnectionManager](mdc:main/xiaozhi-server/core/connection/manager.py)` to accept all dependencies.
    *   **Move the entire `try...except...finally` block** from `ConnectionHandler.handle_connection` (which now uses the router and handlers) into `ConnectionManager.manage_connection`.
    *   Adapt the moved code to use the manager's dependencies (`self`).
    *   Move the `_create_handler_context` logic as well.
    *   Modify the server entry point (`[WebSocketServer._handle_connection](mdc:main/xiaozhi-server/core/websocket_server.py)`) to instantiate and use `ConnectionManager` instead of `ConnectionHandler`.
    *   **Test:** Perform *full regression testing* of all application features.

5.  **Step 10' - Refine and Clean:**
    *   Only *after* the new structure is in place and tested (Step 9'), begin deeper refactoring within the handlers.
    *   Remove obsolete files (`handleTextMessage`, `handleAudioMessage`, `ConnectionHandler` if empty) and unused code.
    *   **Test:** Test after significant cleanup or refactoring actions.

**Core Idea:** Isolate changes, test frequently, and defer major structural shifts (`ConnectionManager` introduction) until the individual components (`Router`, `Handlers`) are integrated and verified within the existing structure.

记住最重要的前提：不要随意删减原始项目代码的逻辑、可以因为调整调用的结构来创建新的类，如果原始的代码函数名可以使用先不用创建新的来替代。先将结构简化和解耦。注意：用中文回复，并且修改的代码需要在代码文件中注释。
